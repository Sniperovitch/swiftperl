import CPerl

extension UnsafeInterpreter {
	mutating func unsafeCall<C : Collection>(sv: UnsafeSvPointer, args: C, flags: Int32 = 0) throws -> UnsafeStackBufferPointer
		where C.Iterator.Element == UnsafeSvPointer, C.IndexDistance == Int {
		let stack = UnsafeCallStack(perl: &self, args: args)
		let count = call_sv(sv, G_EVAL|flags)
		let result = stack.popReturned(count: Int(count))
		let err = ERRSV
		if Bool(err, perl: &self) {
			throw PerlError.died(PerlSV(err)) // FIXME make a copy
		}
		return result
	}

	mutating func unsafeCall<C : Collection>(sv: UnsafeSvPointer, discardingResultWithArgs args: C, flags: Int32 = G_VOID) throws -> Void
		where C.Iterator.Element == UnsafeSvPointer, C.IndexDistance == Int {
		_ = UnsafeCallStack(perl: &self, args: args)
		_ = call_sv(sv, G_EVAL|G_DISCARD|flags)
		let err = ERRSV
		if Bool(err, perl: &self) {
			throw PerlError.died(PerlSV(err)) // FIXME make a copy
		}
	}

	mutating func unsafeEval(sv: UnsafeSvPointer, flags: Int32 = 0) throws -> UnsafeStackBufferPointer {
		let stack = UnsafeCallStack(perl: &self, args: EmptyCollection())
		let count = eval_sv(sv, flags)
		let result = stack.popReturned(count: Int(count))
		let err = ERRSV
		if Bool(err, perl: &self) {
			throw PerlError.died(PerlSV(err)) // FIXME make a copy
		}
		return result
	}

	mutating func enterScope() {
		self.ENTER()
		self.SAVETMPS()
	}

	mutating func leaveScope() {
		self.FREETMPS()
		self.LEAVE()
	}
}

%{
	import re

	def context(r):
		if r == "Void":
			return "G_VOID"
		elif ',' in r:
			return "G_ARRAY"
		else:
			return "G_SCALAR"
	
	def generic(r):
		return ", ".join(map(lambda r: r + " : PerlSVConvertible", re.findall("R\\d*", r)))
	
	def fqGeneric(r):
		g = generic(r)
		return "" if g == "" else "<" + g + ">"
	
	def moreGeneric(r):
		g = generic(r)
		return "" if g == "" else ", " + g
	
	def result(r):
		return re.sub("(R(\\d*)\\??)", lambda m: m.group(1) + ".promoteFromUnsafeSV(svResult[" + (m.group(2) or "0") + "], perl: &self)", r)

	calls = ["Void", "R", "R?", "(R0?, R1?)"]
}%

extension UnsafeInterpreter {
	mutating func call(sv: UnsafeSvPointer, flags: Int32 = G_VOID) throws -> Void {
		try unsafeCall(sv: sv, discardingResultWithArgs: EmptyCollection(), flags: flags)
	}

% for r in calls:
	mutating func call<C : Collection${moreGeneric(r)}>(sv: UnsafeSvPointer, args: C, flags: Int32 = ${context(r)}) throws -> ${r}
		where C.Iterator.Element == PerlSVConvertible? {
		enterScope()
		defer { leaveScope() }
		let svArgs: [UnsafeSvPointer] = args.map { $0?.promoteToUnsafeSV(perl: &self) ?? newSV() }
%   if r == "Void":
		try unsafeCall(sv: sv, discardingResultWithArgs: svArgs, flags: flags)
%   else:
		let svResult = try unsafeCall(sv: sv, args: svArgs, flags: flags)
		return try ${result(r)}
%   end
	}
% end
}

extension UnsafeInterpreter {
% for r in calls:
	mutating func call<C : Collection${moreGeneric(r)}>(method: String, args: C, flags: Int32 = ${context(r)}) throws -> ${r}
		where C.Iterator.Element == PerlSVConvertible? {
		return try call(sv: newSV(method, mortal: true), args: args, flags: G_METHOD|flags)
	}
% end
}

extension UnsafeInterpreter {
	mutating func call(sub: String, flags: Int32 = G_VOID) throws -> Void {
		try call(sv: newSV(sub, mortal: true), flags: flags)
	}

% for r in calls:
	mutating func call<C : Collection${moreGeneric(r)}>(sub: String, args: C, flags: Int32 = ${context(r)}) throws -> ${r}
		where C.Iterator.Element == PerlSVConvertible? {
		return try call(sv: newSV(sub, mortal: true), args: args, flags: flags)
	}
% end
}

extension PerlInterpreter {
	func call(sub: String) throws -> Void {
		try pointer.pointee.call(sub: sub)
	}

% for r in calls:
	func call${fqGeneric(r)}(sub: String, _ args: PerlSVConvertible?...) throws -> ${r} {
		return try pointer.pointee.call(sub: sub, args: args)
	}
% end
}

extension PerlCV {
	func call() throws -> Void {
		try pointer.withMemoryRebound(to: UnsafeSV.self, capacity: 1) {
			try perl.pointee.call(sv: $0)
		}
	}

% for r in calls:
	func call${fqGeneric(r)}(_ args: PerlSVConvertible?...) throws -> ${r} {
		return try pointer.withMemoryRebound(to: UnsafeSV.self, capacity: 1) {
			return try perl.pointee.call(sv: $0, args: args)
		}
	}
% end
}

extension UnsafeInterpreter {
% for r in calls:
	mutating func eval${fqGeneric(r)}(sv: UnsafeSvPointer, flags: Int32 = ${context(r)}) throws -> ${r} {
		enterScope()
		defer { leaveScope() }
%   if r == "Void":
		_ = try unsafeEval(sv: sv, flags: flags)
%   else:
		let svResult = try unsafeEval(sv: sv, flags: flags)
		return try ${result(r)}
%   end
	}
% end

% for r in calls:
	mutating func eval${fqGeneric(r)}(_ string: String, flags: Int32 = ${context(r)}) throws -> ${r} {
		return try eval(sv: newSV(string, mortal: true), flags: flags)
	}
% end
}

extension PerlInterpreter {
% for r in calls:
	func eval${fqGeneric(r)}(_ string: String) throws -> ${r} {
		return try pointer.pointee.eval(string)
	}
% end
}

extension PerlObjectType {
	func call(method: String) throws -> Void {
		return try sv.perl.pointee.call(method: method, args: CollectionOfOne(.some(self)))
	}

	static func call(method: String, perl: UnsafeInterpreterPointer = UnsafeInterpreter.current) throws -> Void {
		return try perl.pointee.call(method: method, args: CollectionOfOne(.some(perlClassName)))
	}

% for r in calls:
	func call<C : Collection${moreGeneric(r)}>(method: String, args: C) throws -> ${r}
		where C.Iterator.Element == PerlSVConvertible? {
		var fullArgs = ContiguousArray<PerlSVConvertible?>()
		fullArgs.reserveCapacity(1 + numericCast(args.count))
		fullArgs.append(self)
		fullArgs.append(contentsOf: args)
		return try sv.perl.pointee.call(method: method, args: fullArgs)
	}

	func call${fqGeneric(r)}(method: String, _ args: PerlSVConvertible?...) throws -> ${r} {
		return try call(method: method, args: args)
	}

	static func call<C : Collection${moreGeneric(r)}>(method: String, args: C, perl: UnsafeInterpreterPointer = UnsafeInterpreter.current) throws -> ${r}
		where C.Iterator.Element == PerlSVConvertible? {
		var fullArgs = ContiguousArray<PerlSVConvertible?>()
		fullArgs.reserveCapacity(1 + numericCast(args.count))
		fullArgs.append(perlClassName)
		fullArgs.append(contentsOf: args)
		return try perl.pointee.call(method: method, args: fullArgs)
	}

	static func call${fqGeneric(r)}(method: String, _ args: PerlSVConvertible?..., perl: UnsafeInterpreterPointer = UnsafeInterpreter.current) throws -> ${r} {
		return try call(method: method, args: args)
	}
% end
}
