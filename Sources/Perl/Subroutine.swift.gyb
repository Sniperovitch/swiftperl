import CPerl

/// Provides a safe wrapper for Perl subroutine (`CV`).
/// Performs reference counting on initialization and deinitialization.
///
/// ## Cheat Sheet
///
/// ### Creation of an anonymous subroutine
///
/// ```perl
/// my $summer = sub {
///		my ($lv, $rv) = @_;
///		return $lv + $rv;
/// }
/// ```
///
/// ```swift
/// let summer = PerlSub {
///		(lv: Int, rv: Int) -> Int in
///		return lv + rv
/// }
/// ```
///
/// In fact, these examples are not fully equal. The Perl version returns a SV pointing to a CV,
/// whereas the Swift version returns just a CV.
///
/// ### Creation of a named subroutine
///
/// ```perl
/// sub strlen {
///		return length $_[0];
/// }
/// ```
///
/// ```swift
///	PerlSub(name: "strlen") { (s: String) in
///		return s.characters.count
/// }
/// ```
///
/// ### Calling a subroutine
///
/// ```perl
/// my $sum = $summer->(10, 20);
/// ```
///
/// ```swift
/// let sum = summer.call(10, 20)
/// ```
public final class PerlSub : PerlValue, PerlDerived {
	public typealias UnsafeValue = UnsafeCV

	convenience init(noinc sv: UnsafeSvPointer, perl: UnsafeInterpreterPointer) throws {
		try self.init(_noinc: sv, perl: perl)
	}

	@discardableResult
	convenience init(name: String?, perl: UnsafeInterpreterPointer = UnsafeInterpreter.current, file: StaticString = #file, body: @escaping CvBody) {
		let cv = perl.pointee.newCV(name: name, file: file, body: body) // FIXME Why result is non-optional???
		let sv = UnsafeMutableRawPointer(cv).bindMemory(to: UnsafeSV.self, capacity: 1)
		self.init(noincUnchecked: sv, perl: perl)
		if name != nil {
			sv.pointee.refcntInc()
		}
	}

	/// Returns the specified Perl subroutine with the given name.
	/// If the subroutine does not exist then `nil` is returned.
	public convenience init?(get name: String, perl: UnsafeInterpreterPointer = UnsafeInterpreter.current) {
		guard let cv = perl.pointee.getCV(name) else { return nil }
		self.init(inc: cv, perl: perl)
	}

	func withUnsafeCvPointer<R>(_ body: (UnsafeCvPointer, UnsafeInterpreterPointer) throws -> R) rethrows -> R {
		return try withUnsafeSvPointer { sv, perl in
			return try sv.withMemoryRebound(to: UnsafeCV.self, capacity: 1) {
				return try body($0, perl)
			}
		}
	}

	var file: String {
		return withUnsafeCvPointer { cv, _ in cv.pointee.file }
	}

	/// A textual representation of the CV, suitable for debugging.
	public override var debugDescription: String {
		let deparse: PerlObject = try! perl.pointee.eval("use B::Deparse; B::Deparse->new('-sCi0')")
		var text: String = try! deparse.call(method: "coderef2text", self)
		text = text.characters.split { $0 == "\n" } .map(String.init).joined(separator: " ")
		return "PerlSub(\(text) at \(file))"
	}
}

%{
	def optrange(count):
		return range(0, (count + 1) if count < 2 else 2)

	def generic(prefix, count, tail):
		list = map(lambda n: "P" + str(n) + ": PerlSvConvertible", range(0, prefix)) + map(lambda n: "R" + str(n) + ": PerlSvConvertible", range(0, count))
		if tail != "fixed":
			list.append("T: PerlSvConvertible")
		g = ", ".join(list)
		return "" if g == "" else "<" + g + ">"

	def tuple(prefix, count, optional, tail):
		if optional == 0:
			list = map(lambda n: prefix + str(n), range(0, count))
		elif optional == 1:
			list = map(lambda n: prefix + str(n) + "?", range(0, count))
		else:
			list = [prefix + "0"] + map(lambda n: prefix + str(n) + "?", range(1, count))
		if tail == "array":
			list.append("[T]")
		elif tail == "hash":
			list.append("[String: T]")
		return "(" + ", ".join(list) + ")"

	def bodyArgs(count, tail):
		list = map(lambda n: "stack.fetch(at: " + str(n) + ")", range(0, p))
		if tail != "fixed":
			list.append("stack.fetchTail(startingAt: " + str(p) + ")")
		return ", ".join(list)
}%

extension PerlSub {
% for tail in ("fixed", "array", "hash"):
%   for p in range(0, 8):
%     args = bodyArgs(p, tail)
%     for r in range(0, 3):
%       for po in optrange(p):
%         for ro in optrange(r):

	/// Creates a new Perl XSUB.
	///
	/// A body of the XSUB requires a fully qualified prototype of function to correctly convert Perl values
	/// to their Swift counterparts. If a body throws then an error is propagated to Perl as a Perl exception (`die`).
	///
	/// - Parameter name: A fully qualified name of the subroutine under which it will be accessible in Perl.
	///   If not specified (or `nil` passed) then anonymous subroutine will be created.
	/// - Parameter file: A name of a source file subroutine was declared in. Used for debug purposes only.
	/// - Parameter body: The body of the XSUB.
	@discardableResult
	public convenience init${generic(p, r, tail)}(name: String? = nil, file: StaticString = #file, body: @escaping ${tuple("P", p, po, tail)} throws -> ${tuple("R", r, ro, "fixed")}) {
		self.init(name: name, file: file) {
			(stack: UnsafeXSubStack) in
%           if r == 0:
			try body(${args})
			stack.xsReturn(EmptyCollection())
%           elif r == 1:
			let result = try body(${args})
			stack.xsReturn(CollectionOfOne(result.toUnsafeSvPointer(perl: stack.perl)))
%           else:
			let result = try body(${args})
			let svResult: ContiguousArray = [ ${", ".join(map(lambda n: "result." + str(n) + ".toUnsafeSvPointer(perl: stack.perl)", range(0, r)))} ]
			stack.xsReturn(svResult)
%           end
		}
	}

%         end
%       end
%     end
%   end
% end
}

extension PerlSub {
	/// Creates a new Perl XSUB.
	///
	/// This is the last resort variant of subroutine construction. A body of the subroutine will receive all
	/// subroutine's arguments as an array of `PerlScalar` values and should return collection of `PerlScalar`s as
	/// its result. All examinations of concrete values' types should be performed manually.
	///
	/// - Parameter name: A fully qualified name of the subroutine under which it will be accessible in Perl.
	///   If not specified (or `nil` passed) then anonymous subroutine will be created.
	/// - Parameter file: A name of a source file subroutine was declared in. Used for debug purposes only.
	/// - Parameter body: The body of the XSUB.
	@discardableResult
	public convenience init<R: Collection>(name: String? = nil, file: StaticString = #file, body: @escaping ([PerlScalar], UnsafeInterpreterPointer) throws -> R)
		where R.Iterator.Element == PerlScalar {
		self.init(name: name, file: file) {
			(stack: UnsafeXSubStack) in
			let args = try stack.args.map { try PerlScalar.fromUnsafeSvPointer($0, perl: stack.perl) }
			let result = try body(args, stack.perl)
			stack.xsReturn(result.map { $0.toUnsafeSvPointer(perl: stack.perl) })
		}
	}
}

extension PerlNamedClass {
% for tail in ("fixed", "array", "hash"):
%   for p in range(0, 8):
%     for r in range(0, 3):
%       for po in optrange(p):
%         for ro in optrange(r):

	/// Creates a new method in the Perl class specified in `perlClassName` attribute.
	///
	/// A body of the method requires a fully qualified prototype of function to correctly convert Perl values
	/// to their Swift counterparts. The first argument should follow Perl OOP conventions and contain
	/// object `$self` in case of an instance method or string `$class` in case of a class.
	/// If a body throws then an error is propagated to Perl as a Perl exception (`die`).
	///
	/// - Parameter method: A name of the method under which it will be accessible in Perl.
	/// - Parameter file: A name of a source file subroutine was declared in. Used for debug purposes only.
	/// - Parameter body: The body of the XSUB.
	@discardableResult
	public static func createPerlMethod${generic(p, r, tail)}(_ method: String, file: StaticString = #file, body: @escaping ${tuple("P", p, po, tail)} throws -> ${tuple("R", r, ro, "fixed")}) -> PerlSub {
		return PerlSub(name: perlClassName + "::" + method, file: file, body: body)
	}

%         end
%       end
%     end
%   end
% end

	/// Creates a new method in the Perl class specified in `perlClassName` attribute.
	///
	/// This is the last resort variant of subroutine construction. A body of the subroutine will receive all
	/// subroutine arguments as an array of `PerlScalar` values and should return collection of `PerlScalar`s as
	/// its result. All examinations of concrete values types should be performed manually.
	///
	/// - Parameter name: A name of the method under which it will be accessible in Perl.
	/// - Parameter file: A name of a source file subroutine was declared in. Used for debug purposes only.
	/// - Parameter body: The body of the XSUB.
	@discardableResult
	public static func createPerlMethod<R: Collection>(_ method: String, file: StaticString = #file, body: @escaping ([PerlScalar], UnsafeInterpreterPointer) throws -> R) -> PerlSub
		where R.Iterator.Element == PerlScalar {
		return PerlSub(name: perlClassName + "::" + method, file: file, body: body)
	}
}
